name: Build and Release
on:
  release:
    types: [published]

env:
  BINARY_NAME: neo_jilang
  RUSTFLAGS: "-A unused_imports"

jobs:
  build:
    name: Build ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            arch: x86
            rust_target: i686-pc-windows-msvc
            binary_suffix: .exe
            asset_name: windows-x86
          - os: windows-latest
            arch: x64
            rust_target: x86_64-pc-windows-msvc
            binary_suffix: .exe
            asset_name: windows-x64
          - os: ubuntu-latest
            arch: x86
            rust_target: i686-unknown-linux-gnu
            binary_suffix: ""
            asset_name: linux-x86
          - os: ubuntu-latest
            arch: x64
            rust_target: x86_64-unknown-linux-gnu
            binary_suffix: ""
            asset_name: linux-x64
          - os: macos-latest
            arch: x64
            rust_target: x86_64-apple-darwin
            binary_suffix: ""
            asset_name: macos-x64
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      - name: Install Linux x86 dependencies
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86'
        run: |
          sudo dpkg --add-architecture i386
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

      - name: Build
        run: cargo build --release --target ${{ matrix.rust_target }}
          
      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.rust_target }}/release
          asset_name=${{ env.BINARY_NAME }}-${{ matrix.asset_name }}${{ matrix.binary_suffix }}
          cp ${{ env.BINARY_NAME }}${{ matrix.binary_suffix }} ${asset_name}
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            7z a ${asset_name}.zip ${asset_name}
            echo "ASSET_PATH=${asset_name}.zip" >> $GITHUB_ENV
          else
            tar -czf ${asset_name}.tar.gz ${asset_name}
            echo "ASSET_PATH=${asset_name}.tar.gz" >> $GITHUB_ENV
          fi
          
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: target/${{ matrix.rust_target }}/release/${{ env.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}