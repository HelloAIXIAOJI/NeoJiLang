name: Build and Release
# 随便找的一个GitHub Actions，用于构建和发布NeoJiLang
# 哪个网站忘了，特别感谢
on:
  release:
    types: [published]

env:
  # 定义项目名（更改为实际二进制名称）
  BINARY_NAME: neo_jilang
  # 显示名称保持不变
  PROJECT_NAME: NeoJiLang

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # macOS Intel (x86_64)
          - os: macos-latest
            target: x86_64-apple-darwin
            platform_name: Mac-Intel
            ext: ""
          # macOS Apple Silicon (arm64)
          - os: macos-latest
            target: aarch64-apple-darwin
            platform_name: Mac-Apple
            ext: ""
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            platform_name: Linux-x86_64
            ext: ""
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            platform_name: Linux-arm64
            ext: ""
            needs_aarch64_linux: true
          # Windows 64-bit MSVC
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform_name: Win-64
            ext: ".exe"
          # Windows 32-bit MSVC
          - os: windows-latest
            target: i686-pc-windows-msvc
            platform_name: Win-32
            ext: ".exe"
          # Windows ARM64 MSVC
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            platform_name: Win-ARM
            ext: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 安装跨平台编译依赖
      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev

      # 为ARM64 Linux设置交叉编译环境
      - name: Setup cross-compilation for ARM64 Linux
        if: matrix.needs_aarch64_linux
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
          echo 'CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc' >> $GITHUB_ENV
          echo 'CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++' >> $GITHUB_ENV

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Add target
        run: rustup target add ${{ matrix.target }}

      # 查看cargo配置
      - name: Check binary name before build
        run: |
          cargo metadata --format-version=1 | grep -E "name|targets"
          echo "Expected binary path will be: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.ext }}"

      - name: Build release binary
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ runner.os == 'Linux' && matrix.target != 'x86_64-unknown-linux-gnu' }}
          command: build
          args: --release --target ${{ matrix.target }}
      
      # Linux和macOS可能需要特殊处理
      - name: Fix executable permissions (Linux/Mac)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: chmod +x target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}

      # 添加步骤检查构建输出
      - name: Verify build output
        run: |
          ls -la target/${{ matrix.target }}/release/
          echo "Looking for: ${{ env.BINARY_NAME }}${{ matrix.ext }}"

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}${{ matrix.ext }}
          asset_name: ${{ env.PROJECT_NAME }}-${{ matrix.platform_name }}${{ matrix.ext }}
          asset_content_type: application/octet-stream
